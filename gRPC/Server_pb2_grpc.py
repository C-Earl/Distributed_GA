# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Server_pb2 as Server__pb2


class EAStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_genes = channel.unary_unary(
                '/EA/get_genes',
                request_serializer=Server__pb2.get_genes_REQ.SerializeToString,
                response_deserializer=Server__pb2.get_genes_REP.FromString,
                )
        self.return_results = channel.unary_unary(
                '/EA/return_results',
                request_serializer=Server__pb2.return_results_REQ.SerializeToString,
                response_deserializer=Server__pb2.EMPTY.FromString,
                )


class EAServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_genes(self, request, context):
        """Request new genes from the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def return_results(self, request, context):
        """Contribute to the central algorithm
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EAServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_genes': grpc.unary_unary_rpc_method_handler(
                    servicer.return_gene,
                    request_deserializer=Server__pb2.get_genes_REQ.FromString,
                    response_serializer=Server__pb2.get_genes_REP.SerializeToString,
            ),
            'return_results': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_gene,
                    request_deserializer=Server__pb2.return_results_REQ.FromString,
                    response_serializer=Server__pb2.EMPTY.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EA', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EA(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_genes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EA/get_genes',
            Server__pb2.get_genes_REQ.SerializeToString,
            Server__pb2.get_genes_REP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def return_results(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EA/return_results',
            Server__pb2.return_results_REQ.SerializeToString,
            Server__pb2.EMPTY.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
